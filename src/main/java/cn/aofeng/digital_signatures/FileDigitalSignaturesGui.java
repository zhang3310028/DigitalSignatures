/**
 * 建立时间:2009
 */
package cn.aofeng.digital_signatures;

import cn.aofeng.util.IOUtils;
import cn.aofeng.util.gui.GuiUtils;

import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Locale;
import java.util.ResourceBundle;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;
import javax.swing.ProgressMonitor;
import javax.swing.border.TitledBorder;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

/**
 * 文件数字签名摘要界面.
 *
 * @author 聂勇 <a href="mailto:aofengblog@163.com">aofengblog@163.com</a>
 */
@SuppressWarnings("serial")
public class FileDigitalSignaturesGui extends javax.swing.JFrame {

    /** Creates new form FileDigestJFrame */
    public FileDigitalSignaturesGui() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basePanel = new javax.swing.JPanel();
        hashTypeLabel = new javax.swing.JLabel();
        hashType = new javax.swing.JComboBox();
        filePathPanel = new javax.swing.JPanel();
        filePath = new javax.swing.JTextField();
        broswerBtn = new javax.swing.JButton();
        hashComputePanel = new javax.swing.JPanel();
        hashRight = new javax.swing.JTextField();
        calculateBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        comparePanel = new javax.swing.JPanel();
        hashCompare = new javax.swing.JTextField();
        compareBtn = new javax.swing.JButton();
        aboutBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Digital Signatures");
        setIconImage(GuiUtils._applicationIcon);
        setResizable(false);

        hashTypeLabel.setText("Hash Type:");

        hashType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MD5", "SHA-1", "SHA-256", "SHA-384", "SHA-512" }));

        filePathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File Path"));

        broswerBtn.setIcon(cn.aofeng.digital_signatures.FileDigitalSignaturesResource.openIcon);
        broswerBtn.setText("Broswer...");
        broswerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                broswerBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout filePathPanelLayout = new org.jdesktop.layout.GroupLayout(filePathPanel);
        filePathPanel.setLayout(filePathPanelLayout);
        filePathPanelLayout.setHorizontalGroup(
            filePathPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(filePathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(filePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 323, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(broswerBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        filePathPanelLayout.setVerticalGroup(
            filePathPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(filePathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(filePathPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(filePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(broswerBtn))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hashComputePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Hash"));

        hashRight.setEnabled(false);
        hashRight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hashRightMouseClicked(evt);
            }
        });

        calculateBtn.setIcon(cn.aofeng.digital_signatures.FileDigitalSignaturesResource.calculateIcon);
        calculateBtn.setText("Calculate");
        calculateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateBtnActionPerformed(evt);
            }
        });

        saveBtn.setIcon(cn.aofeng.digital_signatures.FileDigitalSignaturesResource.saveIcon);
        saveBtn.setText("Save...");
        saveBtn.setMaximumSize(new java.awt.Dimension(95, 25));
        saveBtn.setMinimumSize(new java.awt.Dimension(95, 25));
        saveBtn.setPreferredSize(new java.awt.Dimension(95, 25));
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout hashComputePanelLayout = new org.jdesktop.layout.GroupLayout(hashComputePanel);
        hashComputePanel.setLayout(hashComputePanelLayout);
        hashComputePanelLayout.setHorizontalGroup(
            hashComputePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(hashComputePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(hashRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 323, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(calculateBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, hashComputePanelLayout.createSequentialGroup()
                .addContainerGap(339, Short.MAX_VALUE)
                .add(saveBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        hashComputePanelLayout.setVerticalGroup(
            hashComputePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, hashComputePanelLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .add(hashComputePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(calculateBtn)
                    .add(hashRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(saveBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        comparePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Compare"));

        hashCompare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hashCompareMouseClicked(evt);
            }
        });

        compareBtn.setIcon(cn.aofeng.digital_signatures.FileDigitalSignaturesResource.compareIcon);
        compareBtn.setText("Compare");
        compareBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout comparePanelLayout = new org.jdesktop.layout.GroupLayout(comparePanel);
        comparePanel.setLayout(comparePanelLayout);
        comparePanelLayout.setHorizontalGroup(
            comparePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(comparePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(hashCompare, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 323, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(compareBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        comparePanelLayout.setVerticalGroup(
            comparePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(comparePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(comparePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(hashCompare, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(compareBtn))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        aboutBtn.setIcon(cn.aofeng.digital_signatures.FileDigitalSignaturesResource.aboutIcon);
        aboutBtn.setText("About");
        aboutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout basePanelLayout = new org.jdesktop.layout.GroupLayout(basePanel);
        basePanel.setLayout(basePanelLayout);
        basePanelLayout.setHorizontalGroup(
            basePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(basePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(basePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(filePathPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(basePanelLayout.createSequentialGroup()
                        .add(hashTypeLabel)
                        .add(13, 13, 13)
                        .add(hashType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 200, Short.MAX_VALUE)
                        .add(aboutBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 103, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(29, 29, 29))
                    .add(basePanelLayout.createSequentialGroup()
                        .add(hashComputePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(basePanelLayout.createSequentialGroup()
                        .add(comparePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        basePanelLayout.setVerticalGroup(
            basePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(basePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(basePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(hashTypeLabel)
                    .add(hashType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(aboutBtn))
                .add(16, 16, 16)
                .add(filePathPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(hashComputePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(comparePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(basePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(basePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

//GEN-FIRST:event_hashCompareMouseClicked
    private void hashCompareMouseClicked(java.awt.event.MouseEvent evt) {
        String key = "HashComparePopupMenu";
        textfieldRightMouseClicked(evt, hashCompare, key);
    }//GEN-LAST:event_hashCompareMouseClicked

//GEN-FIRST:event_hashRightMouseClicked
    private void hashRightMouseClicked(java.awt.event.MouseEvent evt) {
        String key = "HashRightPopupMenu";
        textfieldRightMouseClicked(evt, hashRight, key);
    }//GEN-LAST:event_hashRightMouseClicked

    /**
     * 文本输入框.
     * 
     * @param evt 鼠标事件.
     * @param jTextFieldObj 文本输入框实例.
     * @param key 缓存输入框的key.
     */
    private void textfieldRightMouseClicked(java.awt.event.MouseEvent evt,
            JTextField jTextFieldObj, String key) {
        if (MouseEvent.BUTTON3 == evt.getButton()) {
            JPopupMenu menu = FileDigitalSignaturesGuiHelper.get(key);
            if (null == menu) {
                menu = GuiUtils.createHashPopupMenu(jTextFieldObj);
                FileDigitalSignaturesGuiHelper.set(key, menu);
            }

            menu.show(this.hashRight, evt.getX(), evt.getY());
        }
    }

    private void aboutBtnActionPerformed(java.awt.event.ActionEvent evt) {
        GuiUtils.aboutAuthorDialog(basePanel);
    }

//GEN-FIRST:event_compareBtnActionPerformed
    private void compareBtnActionPerformed(java.awt.event.ActionEvent evt) {
        if (StringUtils.isBlank(this.hashRight.getText())) {
            JOptionPane.showMessageDialog(this.basePanel,
                            resourceBundle.getString("info.hashValueIsEmpty"), 
                            resourceBundle.getString("jOptionPane.info.title"),
                            JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        if (this.hashRight.getText().equalsIgnoreCase(
                this.hashCompare.getText())) {
            JOptionPane.showMessageDialog(this.basePanel,
                    resourceBundle.getString("info.hashValueRight"), 
                    resourceBundle.getString("jOptionPane.right.title"),
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this.basePanel,
                    resourceBundle.getString("info.hashValueWrong"), 
                    resourceBundle.getString("jOptionPane.wrong.title"), 
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_compareBtnActionPerformed

//GEN-FIRST:event_broswerBtnActionPerformed
    private void broswerBtnActionPerformed(java.awt.event.ActionEvent evt) {
        JFileChooser fileChooser = new JFileChooser();
        int action = fileChooser.showOpenDialog(this.basePanel);
        if (JFileChooser.APPROVE_OPTION == action) {
            this.filePath.setText(fileChooser.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_broswerBtnActionPerformed

//GEN-FIRST:event_calculateBtnActionPerformed
    private void calculateBtnActionPerformed(java.awt.event.ActionEvent evt) {
        final String filePathStr = this.filePath.getText();
        if (StringUtils.isBlank(filePathStr)) {
            JOptionPane.showMessageDialog(this.basePanel, 
                    resourceBundle.getString("warn.filepathInvalid"), 
                    resourceBundle.getString("jOptionPane.warn.title"), 
                    JOptionPane.WARNING_MESSAGE);
            filePath.requestFocus();

            return;
        }

        final FileDigitalSignatures digest = new FileDigitalSignatures();
        final File file = new File(filePathStr);
        if (!file.exists()) {
            JOptionPane.showMessageDialog(this.basePanel, 
                    resourceBundle.getString("warn.filepathInvalid"), 
                    resourceBundle.getString("jOptionPane.warn.title"), 
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        this.hashRight.setText("");
        
        // 启动新线程计算文件的hash值.
        Thread calThread = new Thread(new Runnable() {
            
            public void run() {
                calculateBtn.setEnabled(false);
                String hash = digest.hash(filePathStr, hashType.getSelectedItem().toString());
                calculateBtn.setEnabled(true);
                if (null != hash) {
                    hashRight.setText(hash);
                } else {
                    JOptionPane.showMessageDialog(basePanel, 
                            resourceBundle.getString("error.readFileError"), 
                            resourceBundle.getString("jOptionPane.error.title"), 
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
        calThread.start();
        progess(calThread, digest, filePathStr, file.length());

    }//GEN-LAST:event_calculateBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        String srcFileFullPath = this.filePath.getText();
        if (StringUtils.isBlank(srcFileFullPath)) {
            JOptionPane.showMessageDialog(basePanel,
                            resourceBundle.getString("info.srcFileNotExist"),
                            resourceBundle.getString("jOptionPane.info.title"),
                            JOptionPane.INFORMATION_MESSAGE);
            filePath.requestFocus();

            return;
        }
        
        String hashRightValue = this.hashRight.getText();
        if (StringUtils.isBlank(hashRightValue)) {
            JOptionPane.showMessageDialog(basePanel,
                            resourceBundle.getString("info.hashValueIsEmpty"),
                            resourceBundle.getString("jOptionPane.info.title"),
                            JOptionPane.INFORMATION_MESSAGE);

            return;
        }

        boolean isSuccess = false;
        String hashFileExtension = this.hashType.getSelectedItem().toString();
        String hashFileFullPath  = srcFileFullPath + "." + hashFileExtension.toLowerCase();
        File hashFileObj = new File(hashFileFullPath);
        OutputStream out = null;
        try {
            if (! hashFileObj.exists()) {
                hashFileObj.createNewFile();
            }
            out = new FileOutputStream(hashFileObj);
            out.write(hashRightValue.getBytes());
            out.flush();

            isSuccess = true;
        } catch (IOException e) {
            _logger.error("", e);
            
            JOptionPane.showMessageDialog(basePanel,
                            resourceBundle.getString("error.writeFileError"),
                            resourceBundle.getString("jOptionPane.error.title"),
                            JOptionPane.ERROR_MESSAGE);
        } finally {
            IOUtils.close(out);
        }

        if (isSuccess) {
            JOptionPane.showMessageDialog(basePanel,
                            resourceBundle.getString("info.saveFileSuccess"),
                            resourceBundle.getString("jOptionPane.info.title"),
                            JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    /**
     * @param digest 文件数字签证操作类.
     * @param filename 文件名称.
     * @param filesize 文件大小(单位:bytes).
     */
    private void progess(final Thread calThread, final FileDigitalSignatures digest,
            String filename, final long filesize) {
        String messae = resourceBundle.getString("progressmonitor.readingFile") + filename + "...";
        final int maxScale = 100;
        final ProgressMonitor readFileProgressMonitor = new ProgressMonitor(
                FileDigitalSignaturesGui.this, messae, null, 0, maxScale);

        Thread progessThread = new Thread(new Runnable() {
            
            
            public void run() {
                while (true) {
                    // 处理进度条的取消动作
                    if (readFileProgressMonitor.isCanceled()) {
                        readFileProgressMonitor.close();
                        calThread.interrupt();
                        calculateBtn.setEnabled(true);

                        break;
                    }

                    if (digest.getFilesize() == digest.getReadsize()
                            && 0 != digest.getFilesize()
                            && 0 != digest.getReadsize()) {
                        readFileProgressMonitor.setProgress(maxScale);
                        readFileProgressMonitor.setNote(resourceBundle.getString("progressmonitor.complete") + "100%");

                        break;
                    }

                    int scale = (int) ((digest.getReadsize() / filesize) * 100);
                    readFileProgressMonitor.setProgress(scale);
                    readFileProgressMonitor.setNote(resourceBundle.getString("progressmonitor.complete") + scale + "%");

                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {

                    }
                }
                readFileProgressMonitor.close();
            }
        });
        progessThread.start();
    }

    /**
     * 设置地区信息.
     * 
     * @param locale 地区信息.
     */
    @Override
    public void setLocale(Locale locale) {
        resourceBundle = FileDigitalSignaturesResource.getResource("FileDigestResource",
                locale);
    }

    /**
     * 更新界面显示信息.
     */
    public void updateDisplay() {
        if (null == resourceBundle) {
            resourceBundle = FileDigitalSignaturesResource.getResource(
                    "FileDigestResource", Locale.getDefault());
        }

        this.setTitle(resourceBundle.getString("title"));
        
        aboutBtn.setText(resourceBundle.getString("button.about"));
        broswerBtn.setText(resourceBundle.getString("button.broswer"));
        calculateBtn.setText(resourceBundle.getString("button.calculate"));
        saveBtn.setText(resourceBundle.getString("button.save"));
        compareBtn.setText(resourceBundle.getString("button.compare"));
        ((TitledBorder) comparePanel.getBorder()).setTitle(resourceBundle.getString("panel.compare"));
        ((TitledBorder) filePathPanel.getBorder()).setTitle(resourceBundle.getString("panel.filePath"));
        ((TitledBorder) hashComputePanel.getBorder()).setTitle(resourceBundle.getString("panel.hash"));
        hashTypeLabel.setText(resourceBundle.getString("label.hashType"));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            public void run() {
            	GuiUtils.usePlasticXPThemeStyle();
                FileDigitalSignaturesGui fileDigestObj = new FileDigitalSignaturesGui();
                fileDigestObj.updateDisplay();

                fileDigestObj.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutBtn;
    private javax.swing.JPanel basePanel;
    private javax.swing.JButton broswerBtn;
    private javax.swing.JButton calculateBtn;
    private javax.swing.JButton compareBtn;
    private javax.swing.JPanel comparePanel;
    private javax.swing.JTextField filePath;
    private javax.swing.JPanel filePathPanel;
    private javax.swing.JTextField hashCompare;
    private javax.swing.JPanel hashComputePanel;
    private javax.swing.JTextField hashRight;
    private javax.swing.JComboBox hashType;
    private javax.swing.JLabel hashTypeLabel;
    private javax.swing.JButton saveBtn;
    // End of variables declaration//GEN-END:variables

    static ResourceBundle resourceBundle;

    /**
	 * Logger for this class
	 */
	public static final Logger _logger = Logger.getLogger(FileDigitalSignaturesGui.class);
}
